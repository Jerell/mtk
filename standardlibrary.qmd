# Standard Library

ModelingToolkitStandardLibrary.jl is a standard library for the ModelingToolkit acausal modeling system.

Its [Hydraulic](https://docs.sciml.ai/ModelingToolkitStandardLibrary/stable/API/hydraulic/#hydraulic) package includes components (such as tubes, valves, and volumes) that can be used to model isothermal compressible flows. `FlowDivider` is a component that splits flow into parallel pipes.

## Tube

Constant length internal flow model discretized by `N` (`FixedVolume`: `N`, `TubeBase`:`N-1`) which models the fully developed flow friction, compressibility (when `N>1`), and inertia effects when `add_inertia = true`.  See `TubeBase` and `FixedVolume` for more information.

Parameters:  
- $p_{int}$: [$Pa$] initial pressure  
- $area$: [$m^2$] tube cross sectional area  
- $length$: [$m$] real length of the tube  
- $perimeter$: [$m$] perimeter of the pipe cross section (needed only for   non-circular pipes)
- $shape_factor$: shape factor, see $friction_factor$ function  
- $head_factor$: effective length multiplier, used to account for addition   friction from flow development and additional friction such as pipe bends, entrance/exit lossses, etc.

```julia
@component function Tube(N, add_inertia = true; p_int, area, length, head_factor = 1,
        perimeter = 2 * sqrt(area * pi),
        shape_factor = 64, name)
    @assert(N>0,
        "the Tube component must be defined with at least 1 segment (i.e. N>0), found N=$N")

    if N == 1
        return TubeBase(add_inertia,
            false;
            shape_factor,
            p_int,
            area,
            length_int = length,
            head_factor,
            perimeter,
            name)
    end

    #TODO: How to set an assert effective_length >= length ??
    pars = @parameters begin
        p_int = p_int
        area = area
        length = length
        head_factor = head_factor
        perimeter = perimeter
        shape_factor = shape_factor
    end

    vars = []

    ports = @named begin
        port_a = HydraulicPort(; p_int)
        port_b = HydraulicPort(; p_int)
    end

    pipe_bases = []
    for i in 1:(N - 1) # <1>
        x = TubeBase(add_inertia; name = Symbol("p$i"),
            shape_factor = ParentScope(shape_factor),
            p_int = ParentScope(p_int), area = ParentScope(area),
            length_int = ParentScope(length) / (N - 1),
            head_factor = ParentScope(head_factor),
            perimeter = ParentScope(perimeter))
        push!(pipe_bases, x)
    end

    volumes = []
    for i in 1:N
        x = FixedVolume(; name = Symbol("v$i"),
            vol = ParentScope(area) * ParentScope(length) / N,
            p_int = ParentScope(p_int))
        push!(volumes, x)
    end

    eqs = [connect(volumes[1].port, pipe_bases[1].port_a, port_a)
           connect(volumes[end].port, pipe_bases[end].port_b, port_b)]

    for i in 2:(N - 1)
        push!(eqs,
            connect(volumes[i].port, pipe_bases[i - 1].port_b, pipe_bases[i].port_a))
    end

    for i in 1:(N - 1)
        push!(eqs, pipe_bases[i].x ~ length / (N - 1))
    end

    return ODESystem(eqs, t, vars, pars; name, systems = [ports; pipe_bases; volumes])
end
```
1. Discretization

## TubeBase

Variable length internal flow model of the fully developed incompressible flow friction.  Includes optional inertia term when `add_inertia = true` to model wave propagation.  Hydraulic ports have equal flow but variable pressure.  Density is averaged over the pressures, used to calculated average flow velocity and flow friction.

States:  
- $x$: [$m$] length of the pipe  
- $ddm$: [$kg/s^2$] Rate of change of mass flow rate in control volume.  

Parameters:
- $p_int$: [$Pa$] initial pressure
- $area$: [$m^2$] tube cross sectional area
- $length_int$: [$m$] initial tube length
- $perimeter$: [$m$] perimeter of the pipe cross section (needed only for non-circular pipes)
- $shape_factor$: shape factor, see $friction_factor$ function
- $head_factor$: effective length multiplier, used to account for addition friction from flow development and additional friction such as pipe bends, entrance/exit lossses, etc.

```julia
@component function TubeBase(add_inertia = true, variable_length = true; p_int, area,
        length_int, head_factor = 1,
        perimeter = 2 * sqrt(area * pi),
        shape_factor = 64, name)
    pars = @parameters begin
        p_int = p_int
        area = area
        length_int = length_int
        perimeter = perimeter
        shape_factor = shape_factor
        head_factor = head_factor
    end

    @variables begin
        x(t) = length_int
        ddm(t) = 0
    end

    vars = []
    if variable_length
        push!(vars, x)
        c = x
    else
        c = length_int
    end
    add_inertia && push!(vars, ddm)

    systems = @named begin
        port_a = HydraulicPort(; p_int)
        port_b = HydraulicPort(; p_int)
    end

    # let ----------------------
    Δp = port_a.p - port_b.p
    dm = port_a.dm

    d_h = 4 * area / perimeter

    # Opting for a more numerically stable constant density (use head factor to compensate if needed)
    ρ = density_ref(port_a)  # (full_density(port_a) + full_density(port_b)) / 2
    μ = viscosity(port_a)

    f = friction_factor(dm, area, d_h, μ, shape_factor)
    u = dm / (ρ * area)

    shear = (1 / 2) * ρ * regPow(u, 2) * f * head_factor * (c / d_h)
    inertia = if add_inertia
        (c / area) * ddm
    else
        0
    end

    eqs = [0 ~ port_a.dm + port_b.dm # <1>
           domain_connect(port_a, port_b)]

    if variable_length
        push!(eqs, Δp ~ ifelse(c > 0, shear + inertia, zero(c)))
    else
        push!(eqs, Δp ~ shear + inertia)
    end

    if add_inertia
        push!(eqs, D(dm) ~ ddm)
    end

    ODESystem(eqs, t, vars, pars; name, systems)
end

regPow(x, a, delta = 0.01) = x * (x * x + delta * delta)^((a - 1) / 2);


"""
- `dm`: [kg/s] mass flow
- `area`: [m^2] tube cross sectional area
- `d_h`: [m] tube hydraulic diameter.  For circular tubes d_h is the tube diameter, otherwise it can be found from `4*area/perimeter`
- `density`: [kg/m^3] fluid density
- `viscosity`: [Pa*s] or [kg/m-s] fluid dynamic viscosity
- `shape_factor`: the constant defining the laminar fully developed constant f*Re related to the shape of the tube cross section

Reference: Introduction to Fluid Mechanics, Fox & McDonald, 5th Edition, equations 8.19 and 8.21
"""
function friction_factor(dm, area, d_h, viscosity, shape_factor)
    # u = abs(dm) / (density * area)
    # Re = density * u * d_h / viscosity

    Re = abs(dm) * d_h / (area * viscosity)

    if Re <= 2000
        return f_laminar(shape_factor, Re)
    elseif 2000 < Re < 3000
        return transition(2000, 3000, f_laminar(shape_factor, Re),
            f_turbulent(shape_factor, Re), Re)
    else
        return f_turbulent(shape_factor, Re)
    end
end
```
1. Continuity equation

$$
\Delta p = shear + inertia
$$

$$
u = \frac{dm}{\rho * area}
$$

$$ 
shear = \frac{1}{2} * \rho * u * (u^2 + 0.01^2)^{\frac{1}{2}} * f * head\_factor * \frac{c}{d_{h}}
$$

$$
inertia = \frac{c}{area} * ddm
$$



## FlowDivider

Reduces the flow from `port_a` to `port_b` by `n`.  Useful for modeling parallel tubes efficiently by placing a `FlowDivider` on each end of a tube.

Parameters:  
- $p_int$: [$Pa$] initial pressure  
- $n$: divide flow from $port_a$ to $port_b$ by $n$  

```julia
@component function FlowDivider(; p_int, n, name)

    #TODO: assert n >= 1

    pars = @parameters begin
        n = n
        p_int = p_int
    end

    vars = @variables begin
        dm_a(t) = 0
        dm_b(t) = 0
    end

    systems = @named begin
        port_a = HydraulicPort(; p_int)
        port_b = HydraulicPort(; p_int)
        open = Open(; p_int)
    end

    eqs = [connect(port_a, port_b, open.port)
           dm_a ~ port_a.dm
           dm_b ~ dm_a / n
           open.dm ~ dm_a - dm_b # extra flow dumps into an open port
           # port_b.dm ~ dm_b # divided flow goes to port_b
           ]

    ODESystem(eqs, t, vars, pars; name, systems)
end
```

## FixedVolume

Fixed fluid volume.

Parameters:  
- $vol$: [$m^3$] fixed volume  
- $p_{int}$: [$Pa$] initial pressure  

```julia
@component function FixedVolume(; vol, p_int, name)
    pars = @parameters begin
        p_int = p_int
        vol = vol
    end

    systems = @named begin
        port = HydraulicPort(; p_int)
    end

    vars = @variables begin
        rho(t) = liquid_density(port)
        drho(t) = 0
    end

    # let
    dm = port.dm
    p = port.p

    eqs = [D(rho) ~ drho
           rho ~ full_density(port, p)
           dm ~ drho * vol]

    ODESystem(eqs, t, vars, pars; name, systems)
end
```