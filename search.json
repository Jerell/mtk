[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mtk",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is an explanation of the parts of the Julia models and how they relate to the differential equations that describe the system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "modelingtoolkit.html",
    "href": "modelingtoolkit.html",
    "title": "2  ModelingToolkit.jl",
    "section": "",
    "text": "ModelingToolkit.jl is a modeling framework for high-performance symbolic-numeric computation in scientific computing and scientific machine learning. It allows for users to give a high-level description of a model for symbolic preprocessing to analyze and enhance the model. ModelingToolkit can automatically generate fast functions for model components like Jacobians and Hessians, along with automatically sparsifying and parallelizing the computations. Automatic transformations, such as index reduction, can be applied to the model to make it easier for numerical solvers to handle.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>ModelingToolkit.jl</span>"
    ]
  },
  {
    "objectID": "standardlibrary.html",
    "href": "standardlibrary.html",
    "title": "3  Standard Library",
    "section": "",
    "text": "3.1 Tube\nConstant length internal flow model discretized by N (FixedVolume: N, TubeBase:N-1) which models the fully developed flow friction, compressibility (when N&gt;1), and inertia effects when add_inertia = true. See TubeBase and FixedVolume for more information.\nParameters:\n- \\(p_{int}\\): [\\(Pa\\)] initial pressure\n- \\(area\\): [\\(m^2\\)] tube cross sectional area\n- \\(length\\): [\\(m\\)] real length of the tube\n- \\(perimeter\\): [\\(m\\)] perimeter of the pipe cross section (needed only for non-circular pipes) - \\(shape_factor\\): shape factor, see \\(friction_factor\\) function\n- \\(head_factor\\): effective length multiplier, used to account for addition friction from flow development and additional friction such as pipe bends, entrance/exit lossses, etc.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Standard Library</span>"
    ]
  },
  {
    "objectID": "standardlibrary.html#tube",
    "href": "standardlibrary.html#tube",
    "title": "3  Standard Library",
    "section": "",
    "text": "@component function Tube(N, add_inertia = true; p_int, area, length, head_factor = 1,\n        perimeter = 2 * sqrt(area * pi),\n        shape_factor = 64, name)\n    @assert(N&gt;0,\n        \"the Tube component must be defined with at least 1 segment (i.e. N&gt;0), found N=$N\")\n\n    if N == 1\n        return TubeBase(add_inertia,\n            false;\n            shape_factor,\n            p_int,\n            area,\n            length_int = length,\n            head_factor,\n            perimeter,\n            name)\n    end\n\n    #TODO: How to set an assert effective_length &gt;= length ??\n    pars = @parameters begin\n        p_int = p_int\n        area = area\n        length = length\n        head_factor = head_factor\n        perimeter = perimeter\n        shape_factor = shape_factor\n    end\n\n    vars = []\n\n    ports = @named begin\n        port_a = HydraulicPort(; p_int)\n        port_b = HydraulicPort(; p_int)\n    end\n\n    pipe_bases = []\n1    for i in 1:(N - 1)\n        x = TubeBase(add_inertia; name = Symbol(\"p$i\"),\n            shape_factor = ParentScope(shape_factor),\n            p_int = ParentScope(p_int), area = ParentScope(area),\n            length_int = ParentScope(length) / (N - 1),\n            head_factor = ParentScope(head_factor),\n            perimeter = ParentScope(perimeter))\n        push!(pipe_bases, x)\n    end\n\n    volumes = []\n    for i in 1:N\n        x = FixedVolume(; name = Symbol(\"v$i\"),\n            vol = ParentScope(area) * ParentScope(length) / N,\n            p_int = ParentScope(p_int))\n        push!(volumes, x)\n    end\n\n    eqs = [connect(volumes[1].port, pipe_bases[1].port_a, port_a)\n           connect(volumes[end].port, pipe_bases[end].port_b, port_b)]\n\n    for i in 2:(N - 1)\n        push!(eqs,\n            connect(volumes[i].port, pipe_bases[i - 1].port_b, pipe_bases[i].port_a))\n    end\n\n    for i in 1:(N - 1)\n        push!(eqs, pipe_bases[i].x ~ length / (N - 1))\n    end\n\n    return ODESystem(eqs, t, vars, pars; name, systems = [ports; pipe_bases; volumes])\nend\n\n1\n\nDiscretization",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Standard Library</span>"
    ]
  },
  {
    "objectID": "standardlibrary.html#tubebase",
    "href": "standardlibrary.html#tubebase",
    "title": "3  Standard Library",
    "section": "3.2 TubeBase",
    "text": "3.2 TubeBase\nVariable length internal flow model of the fully developed incompressible flow friction. Includes optional inertia term when add_inertia = true to model wave propagation. Hydraulic ports have equal flow but variable pressure. Density is averaged over the pressures, used to calculated average flow velocity and flow friction.\nStates:\n- \\(x\\): [\\(m\\)] length of the pipe\n- \\(ddm\\): [\\(kg/s^2\\)] Rate of change of mass flow rate in control volume.\nParameters:\n- \\(p_int\\): [\\(Pa\\)] initial pressure\n- \\(area\\): [\\(m^2\\)] tube cross sectional area\n- \\(length_int\\): [\\(m\\)] initial tube length\n- \\(perimeter\\): [\\(m\\)] perimeter of the pipe cross section (needed only for non-circular pipes) - \\(shape_factor\\): shape factor, see \\(friction_factor\\) function\n- \\(head_factor\\): effective length multiplier, used to account for addition friction from flow development and additional friction such as pipe bends, entrance/exit lossses, etc.\n@component function TubeBase(add_inertia = true, variable_length = true; p_int, area,\n        length_int, head_factor = 1,\n        perimeter = 2 * sqrt(area * pi),\n        shape_factor = 64, name)\n    pars = @parameters begin\n        p_int = p_int\n        area = area\n        length_int = length_int\n        perimeter = perimeter\n        shape_factor = shape_factor\n        head_factor = head_factor\n    end\n\n    @variables begin\n        x(t) = length_int\n        ddm(t) = 0\n    end\n\n    vars = []\n    if variable_length\n        push!(vars, x)\n        c = x\n    else\n        c = length_int\n    end\n    add_inertia && push!(vars, ddm)\n\n    systems = @named begin\n        port_a = HydraulicPort(; p_int)\n        port_b = HydraulicPort(; p_int)\n    end\n\n    # let ----------------------\n    Δp = port_a.p - port_b.p\n    dm = port_a.dm\n\n    d_h = 4 * area / perimeter\n\n    # Opting for a more numerically stable constant density (use head factor to compensate if needed)\n    ρ = density_ref(port_a)  # (full_density(port_a) + full_density(port_b)) / 2\n    μ = viscosity(port_a)\n\n    f = friction_factor(dm, area, d_h, μ, shape_factor)\n    u = dm / (ρ * area)\n\n    shear = (1 / 2) * ρ * regPow(u, 2) * f * head_factor * (c / d_h)\n    inertia = if add_inertia\n        (c / area) * ddm\n    else\n        0\n    end\n\n1    eqs = [0 ~ port_a.dm + port_b.dm\n           domain_connect(port_a, port_b)]\n\n    if variable_length\n        push!(eqs, Δp ~ ifelse(c &gt; 0, shear + inertia, zero(c)))\n    else\n        push!(eqs, Δp ~ shear + inertia)\n    end\n\n    if add_inertia\n        push!(eqs, D(dm) ~ ddm)\n    end\n\n    ODESystem(eqs, t, vars, pars; name, systems)\nend\n\n1\n\nContinuity equation\n\n\nPressure difference across the tube is defined by these equations.\n\\[\n\\Delta p = shear + inertia\n\\]\n\\[\nu = \\frac{dm}{\\rho * area}\n\\]\n\\[\nshear = \\frac{1}{2} * \\rho * u * (u^2 + 0.01^2)^{\\frac{1}{2}} * f * head\\_factor * \\frac{c}{d_{h}}\n\\]\n\\[\ninertia = \\frac{c}{area} * ddm\n\\]\nregPow(x, a, delta = 0.01) = x * (x * x + delta * delta)^((a - 1) / 2);\n\n\n\"\"\"\n- `dm`: [kg/s] mass flow\n- `area`: [m^2] tube cross sectional area\n- `d_h`: [m] tube hydraulic diameter.  For circular tubes d_h is the tube diameter, otherwise it can be found from `4*area/perimeter`\n- `density`: [kg/m^3] fluid density\n- `viscosity`: [Pa*s] or [kg/m-s] fluid dynamic viscosity\n- `shape_factor`: the constant defining the laminar fully developed constant f*Re related to the shape of the tube cross section\n\nReference: Introduction to Fluid Mechanics, Fox & McDonald, 5th Edition, equations 8.19 and 8.21\n\"\"\"\nfunction friction_factor(dm, area, d_h, viscosity, shape_factor)\n    # u = abs(dm) / (density * area)\n    # Re = density * u * d_h / viscosity\n\n    Re = abs(dm) * d_h / (area * viscosity)\n\n    if Re &lt;= 2000\n        return f_laminar(shape_factor, Re)\n    elseif 2000 &lt; Re &lt; 3000\n        return transition(2000, 3000, f_laminar(shape_factor, Re),\n            f_turbulent(shape_factor, Re), Re)\n    else\n        return f_turbulent(shape_factor, Re)\n    end\nend",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Standard Library</span>"
    ]
  },
  {
    "objectID": "standardlibrary.html#flowdivider",
    "href": "standardlibrary.html#flowdivider",
    "title": "3  Standard Library",
    "section": "3.3 FlowDivider",
    "text": "3.3 FlowDivider\nReduces the flow from port_a to port_b by n. Useful for modeling parallel tubes efficiently by placing a FlowDivider on each end of a tube.\nParameters:\n- \\(p_int\\): [\\(Pa\\)] initial pressure\n- \\(n\\): divide flow from \\(port_a\\) to \\(port_b\\) by \\(n\\)\n@component function FlowDivider(; p_int, n, name)\n\n    #TODO: assert n &gt;= 1\n\n    pars = @parameters begin\n        n = n\n        p_int = p_int\n    end\n\n    vars = @variables begin\n        dm_a(t) = 0\n        dm_b(t) = 0\n    end\n\n    systems = @named begin\n        port_a = HydraulicPort(; p_int)\n        port_b = HydraulicPort(; p_int)\n        open = Open(; p_int)\n    end\n\n    eqs = [connect(port_a, port_b, open.port)\n           dm_a ~ port_a.dm\n           dm_b ~ dm_a / n\n           open.dm ~ dm_a - dm_b # extra flow dumps into an open port\n           # port_b.dm ~ dm_b # divided flow goes to port_b\n           ]\n\n    ODESystem(eqs, t, vars, pars; name, systems)\nend",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Standard Library</span>"
    ]
  },
  {
    "objectID": "standardlibrary.html#fixedvolume",
    "href": "standardlibrary.html#fixedvolume",
    "title": "3  Standard Library",
    "section": "3.4 FixedVolume",
    "text": "3.4 FixedVolume\nFixed fluid volume.\nParameters:\n- \\(vol\\): [\\(m^3\\)] fixed volume\n- \\(p_{int}\\): [\\(Pa\\)] initial pressure\n@component function FixedVolume(; vol, p_int, name)\n    pars = @parameters begin\n        p_int = p_int\n        vol = vol\n    end\n\n    systems = @named begin\n        port = HydraulicPort(; p_int)\n    end\n\n    vars = @variables begin\n        rho(t) = liquid_density(port)\n        drho(t) = 0\n    end\n\n    # let\n    dm = port.dm\n    p = port.p\n\n    eqs = [D(rho) ~ drho\n           rho ~ full_density(port, p)\n           dm ~ drho * vol]\n\n    ODESystem(eqs, t, vars, pars; name, systems)\nend",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Standard Library</span>"
    ]
  },
  {
    "objectID": "ai4ecomponents.html",
    "href": "ai4ecomponents.html",
    "title": "4  Ai4EComponentLib.jl",
    "section": "",
    "text": "Ai4EComponentLib.jl is a component library based on the ModelingToolkit acasual modeling system. It has models for compressed air systems, incompressible fluids, thermodynamic processes and more.\nSome of its pipe models allow for complex branching and merging.\n\n\n\n\n\n\nFigure 4.1: Complex pipe network\n\n\n\nHere is an example HVAC system\n\n\n\n\n\n\nFigure 4.2: example HVAC system\n\n\n\nThese models appear to use the assumption that temperature change in the pipes is negligible.\nfunction SimplePipe(; name, R=100, T=300)\n1    @named inlet = FlowPort()\n    @named outlet = FlowPort()\n    ps = @parameters begin\n2        R = R\n    end\n3    eqs = [\n4        inlet.p - outlet.p ~ R * inlet.qm * abs(inlet.qm),\n5        inlet.qm + outlet.qm ~ 0,\n6        inlet.T ~ outlet.T\n    ]\n    compose(ODESystem(eqs, t, [], ps; name=name), inlet, outlet)\nend\n\n1\n\nFlowPorts define the variables at the inlet and outlet of the pipe.\n\n2\n\nParameters can be defined for each component. Here, R is friction factor [Pa·s/m³], which is given a default value of 100.\n\n3\n\nA set of equations defines the relationship between the inlet and outlet variables.\n\n4\n\nFrictional pressure loss.\n\n5\n\nContinuity equation.\n\n6\n\nConstant temperature.\n\n\n@connector function FlowPort(; name, T0=30.0)\n    sts = @variables begin\n        p(t) = 1.013e5\n        (qm(t)=1, [connect = Flow])\n        T(t)=T0\n    end\n    ODESystem(Equation[], t, sts, []; name=name)\nend\nThe FlowPort has pressure, mass flow, and temperature variables. See Connectors for more info.",
    "crumbs": [
      "Ai4E",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Ai4EComponentLib.jl</span>"
    ]
  },
  {
    "objectID": "ai4epipes.html",
    "href": "ai4epipes.html",
    "title": "5  Pipes",
    "section": "",
    "text": "5.1 AirPipeSim\nExample usage",
    "crumbs": [
      "Ai4E",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "ai4epipes.html#airpipesim",
    "href": "ai4epipes.html#airpipesim",
    "title": "5  Pipes",
    "section": "",
    "text": "5.1.1 AirSimplePipe\nA single pipe or a pipe network with only one inlet and one outlet in steady state.\nAssumptions\n\nThe density or pressure of the air doesn’t change too fast.\nTemperature of the pipe (pipe network) doesn’t change. Default to 300K.\nIdeal gas law is available.\n\nParameters: - R: [kg^{-1}⋅m^{-1}] Resistance coefficient of a pipe (or pipe network) - T: [K] Approximate temperature of the gas inside pipe.\n\\[\np_{in}-p_{out}=Rq_m|q_m|\n\\]\nfunction AirSimplePipe(; name, R=100, T=300)\n    @named inlet = FlowPort(T=T)\n    @named outlet = FlowPort(T=T)\n    ps = @parameters begin\n        R = R\n    end\n    eqs = [\n        inlet.p - outlet.p ~ R * inlet.qm * abs(inlet.qm)\n        inlet.qm + outlet.qm ~ 0\n    ]\n    compose(ODESystem(eqs, t, [], ps; name=name), inlet, outlet)\nend\n\n\n5.1.2 TransitionPipe\nA single straight pipe in transition state.\nAssumptions\n- Ignore the difference in parameters on the same cross section. The flow inside pipe can be treated an 1-D flow. - Temperature of the pipe (pipe network) doesn’t change. Default to 300K. - Ideal gas law is avliable.\nParameters\n- \\(R_g\\): [\\(J⋅kg^{-1}⋅K^{-1}\\)] Ideal gas constant. For air is 287.11, which is unchangeable in this component.\n- \\(T\\): [\\(K\\)] Temperature of the air.\n- \\(f\\): Friction factor\n- \\(D\\): [\\(m\\)] Diameter of the pipe\n- \\(L\\): [\\(m\\)] Length of the pipe\nArguments\n- λ1, λ2 and λ3: Three coefficient for other use like parameter estimation. They have no influence on simulation, and they are default to 1.\n- n: The number of control volumes that the pipe be divided into equally.\n- pins and pouts: [Pa] The initial pressure at the inlet and outlet of pipe. Simulation will start from the steady state of pipe at the boundary pins and pouts.\n\\[\n\\frac{\\partial p}{\\partial t}=-\\frac{R_{g} T}{A} \\frac{\\partial q_{m}}{\\partial x} \\\\\n\\frac{\\partial q_{m}}{\\partial t}=\\left(\\frac{R_{g} T}{A} \\frac{q_{m}^{2}}{p^{2}}-A\\right) \\frac{\\partial p}{\\partial x}-2 \\frac{R_{g} T}{A} \\frac{q_{m}}{p} \\frac{\\partial q_{m}}{\\partial x}-\\frac{f}{2 D} \\frac{R_{g} T}{A} \\frac{q_{m}\\left|q_{m}\\right|}{p}\n\\]\nfunction TransitionPipe(; name,λ1=1.0,λ2=1.0,λ3=1.0, n=10, f=0.016, D=0.2, L=100, T=300, pins=0.56e6, pouts=0.56e6)\n    RT = 287.11 * T\n    A0 = pi / 4 * D^2\n    c10 = RT / A0\n    c20 = c10 * f / 2 / D\n    dx=L/n\n\n    @named inlet = FlowPort(T=T)\n    @named outlet = FlowPort(T=T)\n\n    @variables (qm(t))[1:n] (p(t))[1:n+1]\n\n    qms = sqrt(abs(pins^2 - pouts^2) / (f * L * RT / D / A0 / A0))\n    initialValue = Dict(qm[i] =&gt; qms for i = 1:n)\n    merge!(initialValue, Dict(p[i] =&gt; sqrt(pins^2 * (1 - (i-1) / n) + pouts^2 * (i-1) / n) for i = 1:n+1))\n\n    @parameters begin\n        A = A0*λ2\n        c1 = c10*λ1\n        c2 = c20*λ3\n        dx = L / n\n        f = f\n    end\n\n    eqs_continous = [\n        ∂(p[i]) ~ c1 * (qm[i-1] - qm[i]) / dx for i = 2:n\n    ]\n\n    eqs_momentum = [\n        ∂(qm[i]) ~ (c1 * qm[i]^2 / (0.5 * (p[i+1] + p[i]))^2 - A) * (p[i+1] - p[i]) / dx + c1 * qm[i] / (0.5 * (p[i+1] + p[i])) * (qm[i-1] - qm[i+1]) / dx - c2 * qm[i] * abs(qm[i]) / (0.5 * (p[i+1] + p[i])) for i = 2:n-1\n    ]\n\n    bd = [\n        p[1] ~ inlet.p\n        p[n+1] ~ outlet.p\n        qm[n] ~ -outlet.qm\n        qm[1] ~ inlet.qm\n        ∂(qm[1]) ~ (c1 * qm[1]^2 / (0.5 * (p[2] + p[1]))^2 - A) * (p[2] - p[1]) / dx + c1 * qm[1] / (0.5 * (p[2] + p[1])) * (3 * qm[1] - 4 * qm[2] + qm[3]) / dx - c2 * qm[1] * abs(qm[1]) / (0.5 * (p[2] + p[1]))\n        ∂(qm[n]) ~ (c1 * qm[n]^2 / (0.5 * (p[n+1] + p[n]))^2 - A) * (p[n+1] - p[n]) / dx + c1 * qm[n] / (0.5 * (p[n+1] + p[n])) * (-3 * qm[n] + 4 * qm[n-1] - qm[n-2]) / dx - c2 * qm[n] * abs(qm[n]) / (0.5 * (p[n+1] + p[n]))\n    ]\n    compose(ODESystem([eqs_continous; eqs_momentum; bd], t; name=name, defaults=initialValue), inlet, outlet)\nend",
    "crumbs": [
      "Ai4E",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "ai4epipes.html#compressedairsystem",
    "href": "ai4epipes.html#compressedairsystem",
    "title": "5  Pipes",
    "section": "5.2 CompressedAirSystem",
    "text": "5.2 CompressedAirSystem\nExample usage\n\n5.2.1 StraightPipe\nStraight round pipe and height difference is not considered. Friction coefficient is obtained from Moody diagram.\nArguments:\n- \\(D\\): [\\(m\\)] Pipe diameter, defaults: 1.0\n- \\(L\\): [\\(m\\)] Pipe length, defaults: 1.0\n- \\(ϵ\\): [\\(m\\)] Absolute roughness of pipeline, defaults: 0.05\nfunction StraightPipe(; name, D=1.0, L=1.0, ϵ=0.05e-3)\n    @named this_i1o1Component = SISOComponent()\n    @unpack Δp, qm, ρ_mean, qv_mean, μ_mean, inlet, outlet = this_i1o1Component\n    sts = @variables begin\n        Re(t) = 1.5e5\n        u(t) = 10\n        f(t) = 0.03\n        R(t) = 10\n    end\n    ps = @parameters D = D L = L ϵ = ϵ\n    eqs = [\n        Re ~ pipeRe(ρ_mean, u, D, μ_mean)\n        0 ~ pipeFriction_turbulent(f, Re, ϵ, D)\n        u ~ pipeVelocity(Δp, ρ_mean, L, D, f)\n        qv_mean ~ u * pi / 4 * D * D\n        R ~ abs(Δp) / qm / qm\n    ]\n    extend(ODESystem(eqs, t, sts, ps; name=name), this_i1o1Component)\nend\n\n\n5.2.2 SimplePipe\nArguments:\n- \\(R0\\): [\\(kg/m^7\\)] Resistance coefficient of pipeline\nfunction SimplifiedPipe(; name, R0)\n    @named this_i1o1Component = SISOComponent()\n    @unpack Δp, qm, qv_mean, inlet, outlet = this_i1o1Component\n    sys = @variables R(t) = 3000\n    eqs = [\n        R ~ R0\n        qm ~ IfElse.ifelse(Δp &gt;= 0, sqrt(Δp / R), -sqrt(-Δp / R))\n    ]\n    extend(ODESystem(eqs, t, sys, []; name=name), this_i1o1Component)\nend\n\n\n5.2.3 TransitionPipe\nArguments: - f: [kg/m⁷] Resistance coefficient of pipeline - n: Number of pipe discrete node - D: [m] Pipe diameter, defaults: 1.0 - L: [m] Pipe length, defaults: 1.0 - T: [K] Ambient temperature, defaults: 300 - p0: [Pa] Initial pressure of each node - qm0: [kg/(m²⋅s)] Initial specific momentum of each node\nfunction TransitionPipe(; name, n=10, f=0.011, D=1.0, L=1.0, T=300, p0=zeros(n), qm0=zeros(n))\n\n    RT = 287.11 * T\n    A0 = pi / 4 * D^2\n    c10 = RT / A0\n    c20 = c10 * f / 2 / D\n\n    @named inlet = FlowPort()\n    @named outlet = FlowPort()\n\n    @parameters begin\n        A = A0\n        c1 = c10\n        c2 = c20\n        dx = L / n\n        f = f\n    end\n\n    @variables (qm(t))[1:n] (p(t))[1:n+1]\n\n    initialValue = Dict(qm[i] =&gt; qm0[i] for i = 1:n)\n    merge!(initialValue, Dict(p[i] =&gt; p0[i] for i = 1:n))\n\n    eqs_continous = [\n        ∂(p[i]) ~ c1 * (qm[i-1] - qm[i]) / dx\n        for i = 2:n\n    ]\n\n    eqs_momentum = [\n        ∂(qm[i]) ~ (c1 * qm[i]^2 / (0.5 * (p[i+1] + p[i]))^2 - A) * (p[i+1] - p[i]) / dx + c1 * qm[i] / (0.5 * (p[i+1] + p[i])) * (qm[i-1] - qm[i+1]) / dx - c2 * qm[i] * abs(qm[i]) / (0.5 * (p[i+1] + p[i]))\n        for i = 2:n-1\n    ]\n\n    bd = [\n        p[1] ~ inlet.p\n        p[n+1] ~ outlet.p\n        qm[n] ~ -outlet.qm\n        qm[1] ~ inlet.qm\n        ∂(qm[1]) ~ (c1 * qm[1]^2 / (0.5 * (p[2] + p[1]))^2 - A) * (p[2] - p[1]) / dx + c1 * qm[1] / (0.5 * (p[2] + p[1])) * (3 * qm[1] - 4 * qm[2] + qm[3]) / dx - c2 * qm[1] * abs(qm[1]) / (0.5 * (p[2] + p[1]))\n        ∂(qm[n]) ~ (c1 * qm[n]^2 / (0.5 * (p[n+1] + p[n]))^2 - A) * (p[n+1] - p[n]) / dx + c1 * qm[n] / (0.5 * (p[n+1] + p[n])) * (-3 * qm[n] + 4 * qm[n-1] - qm[n-2]) / dx - c2 * qm[n] * abs(qm[n]) / (0.5 * (p[n+1] + p[n]))\n    ]\n    compose(ODESystem([eqs_continous; eqs_momentum; bd], t; name=name, defaults=initialValue), inlet, outlet)\nend",
    "crumbs": [
      "Ai4E",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "ai4epipes.html#hvac",
    "href": "ai4epipes.html#hvac",
    "title": "5  Pipes",
    "section": "5.3 HVAC",
    "text": "5.3 HVAC\n\n5.3.1 SimplePipe\nParameters:\n- \\(R\\): [\\(Pa·s/m³\\)] Friction factor\nfunction SimplePipe(; name, R=100, T=300)\n    @named inlet = FlowPort()\n    @named outlet = FlowPort()\n    ps = @parameters begin\n        R = R\n    end\n    eqs = [\n        inlet.p - outlet.p ~ R * inlet.qm * abs(inlet.qm),\n        inlet.qm + outlet.qm ~ 0,\n        inlet.T ~ outlet.T\n    ]\n    compose(ODESystem(eqs, t, [], ps; name=name), inlet, outlet)\nend",
    "crumbs": [
      "Ai4E",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "ai4epipes.html#incompressiblepipe",
    "href": "ai4epipes.html#incompressiblepipe",
    "title": "5  Pipes",
    "section": "5.4 IncompressiblePipe",
    "text": "5.4 IncompressiblePipe\nEnergy conservation equation in the form of Bernoulli Equation between two ports:\n\\[\n\\frac{p_{in}}{\\rho g} +\\frac{8q_{in}^{2}}{\\pi^2D^4g} + z_{in}=\n\\frac{p_{out}}{\\rho g} +\\frac{8q_{out}^{2}}{\\pi^2D^4g} + z_{out}+h_f+h_m\n\\]\n\n5.4.1 SimplePipe\nArguments:\n- \\(zin\\): [\\(m\\)] The height of inlet port\n- \\(zout\\): [\\(m\\)] The height of outlet port\n- \\(ρ\\): [\\(m³/kg\\)] The density of fluid passing the port\n\n\n\n\n\n\nWarning\n\n\n\nThe density unit above is likely wrong. This is what the source code says but these annotations have been inconsistent: some have a line describing another component. Some have typos. This unit has likely been inverted by accident.\n\n\nfunction SimplePipe(; name, L=10.0, D=25E-3, f=0.01, ρ=1.0E3, zin=0.0, zout=0.0, K_inside=0.0)\n    @named in = PipeNode(z=zin)\n    @named out = PipeNode(z=zout)\n    ps = @parameters D = D L = L f = f K_inside = K_inside\n    eqs = [\n        _NodeEnergy(in, D, ρ) ~ _NodeEnergy(out, D, ρ) + _h_f(in, f, L, D) + _h_m(in, K_inside, D)\n        0 ~ in.q + out.q\n    ]\n    compose(ODESystem(eqs, t, [], ps, name=name), in, out)\nend\n\n\n5.4.2 ElbowPipe\nParameters:\n- \\(D\\): [\\(m\\)] Diameter of pipe\n- \\(K\\): Local resistance loss coefficient\nArguments:\n- \\(zin\\): [\\(m\\)] The height of inlet port\n- \\(zout\\): [\\(m\\)] The height of outlet port\n- \\(ρ\\): [`m³/kg] The density of fluid passing the port\n\n\n\n\n\n\nWarning\n\n\n\nSame as above.\n\n\nfunction ElbowPipe(; name, D=25E-3, K=1.0, ρ=1.0E3, zin=0.0, zout=0.0)\n    @named in = PipeNode(z=zin)\n    @named out = PipeNode(z=zout)\n    ps = @parameters D = D K = K\n    eqs = [\n        _NodeEnergy(in, D, ρ) ~ _NodeEnergy(out, D, ρ) + _h_m(in, K, D)\n        0 ~ in.q + out.q\n    ]\n    compose(ODESystem(eqs, t, [], ps, name=name), in, out)\nend\n\n\n5.4.3 PipeNode\nA pipe port(inlet or outlet) in an pipe network.\nStates:\n- \\(p(t)\\): [\\(Pa\\)] The pressure at this port\n- \\(q(t)\\): [\\(m³/s\\)] The volume flow passing through this port\nParameters:\n- \\(z\\): [\\(m\\)] The hight of port, expressing potential energy\n@connector function PipeNode(; name, z=0)\n    sts = @variables begin\n        p(t) = 1.0\n        (q(t)=1.0, [connect = Flow])\n    end\n    ps = @parameters z = z\n    ODESystem(Equation[], t, sts, ps; name=name)\nend\nNodeEnergy and loss calculations are shown here.",
    "crumbs": [
      "Ai4E",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Pipes</span>"
    ]
  },
  {
    "objectID": "connectors.html",
    "href": "connectors.html",
    "title": "6  Connectors",
    "section": "",
    "text": "A system of two pipes, pipe1 and pipe2, would have equations generated by calling connect on the ports of the pipes.\nconnect(pipe1.outlet, pipe2.inlet)\nThis function uses the [connect] metadata on each of the port’s variables to generate equations describing the relationship between the connected components.\n@connector function FlowPort(; name, T0=30.0)\n    sts = @variables begin\n        p(t) = 1.013e5\n1        (qm(t)=1, [connect = Flow])\n        T(t)=T0\n    end\n    ODESystem(Equation[], t, sts, []; name=name)\nend\n\n1\n\nThis is a Flow variable.\n\n\nLike Modelica, there are Equality, Flow, and Stream variables. Rackauckas (2022)\n\nEquality variables connect by making values equal. For example, connecting pins in an electrical circuit makes the voltages equal at the junction.\nFlow variables connect by making the sum zero. For example, connecting pins in an electrical circuit makes the current sum to zero at the junction.\nStream variables are used for fluids, where variables are determined by the upstream side of the flow. This is useful when you have convective transport of specific quantities, such as specific enthalpy and chemical composition. A stream variable describes a quantity that is carried by a flow variable.\n\nIf at least one variable in a connector has the stream prefix, the connector is called stream connector and the corresponding variable is called stream variable. A stream connector must have exactly one variable with the flow prefix.\n\n\n\n\nRackauckas, Christopher. 2022. “ModelingToolkit Variable Metadata for Connectors.” https://discourse.julialang.org/t/modelingtoolkit-variable-metadata-for-connectors/92056/3.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Connectors</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Rackauckas, Christopher. 2022. “ModelingToolkit Variable Metadata\nfor Connectors.” https://discourse.julialang.org/t/modelingtoolkit-variable-metadata-for-connectors/92056/3.",
    "crumbs": [
      "References"
    ]
  }
]