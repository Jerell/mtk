# Pipes

This library has a variety of pipe models.

## [AirPipeSim](https://ai4energy.github.io/Ai4EComponentLib.jl/dev/API/AirPipeSim/)

[Example usage](https://ai4energy.github.io/Ai4EComponentLib.jl/dev/tutorials/AirPipeSim/)

### AirSimplePipe

A single pipe or a pipe network with only one inlet and one outlet in steady state.

Assumptions

- The density or pressure of the air doesn't change too fast.
- Temperature of the pipe (pipe network) doesn't change. Default to 300K.
- Ideal gas law is available.

Parameters:  
- $R$: [$kg^{-1}⋅m^{-1}$] Resistance coefficient of a pipe (or pipe network)  
- $T$: [$K$] Approximate temperature of the gas inside pipe.  

$$
p_{in}-p_{out}=Rq_m|q_m|
$$

```julia
function AirSimplePipe(; name, R=100, T=300)
    @named inlet = FlowPort(T=T)
    @named outlet = FlowPort(T=T)
    ps = @parameters begin
        R = R
    end
    eqs = [
        inlet.p - outlet.p ~ R * inlet.qm * abs(inlet.qm)
        inlet.qm + outlet.qm ~ 0
    ]
    compose(ODESystem(eqs, t, [], ps; name=name), inlet, outlet)
end
```

### TransitionPipe

A single straight pipe in transition state.

Assumptions  
- Ignore the difference in parameters on the same cross section. The flow inside pipe can be treated an 1-D flow.
- Temperature of the pipe (pipe network) doesn't change. Default to 300K.
- Ideal gas law is avliable.

Parameters  
- $R_g$: [$J⋅kg^{-1}⋅K^{-1}$] Ideal gas constant. For air is 287.11, which is unchangeable in this component.  
- $T$: [$K$] Temperature of the air.  
- $f$: Friction factor  
- $D$: [$m$] Diameter of the pipe  
- $L$: [$m$] Length of the pipe

Arguments  
- `λ1, λ2 and λ3`: Three coefficient for other use like parameter estimation. They have no influence on simulation, and they are default to 1.  
- `n`: The number of control volumes that the pipe be divided into equally.  
- `pins and pouts`: [`Pa`] The initial pressure at the inlet and outlet of pipe. Simulation will start from the steady state of pipe at the boundary pins and pouts.  


$$
\frac{\partial p}{\partial t}=-\frac{R_{g} T}{A} \frac{\partial q_{m}}{\partial x} \\
\frac{\partial q_{m}}{\partial t}=\left(\frac{R_{g} T}{A} \frac{q_{m}^{2}}{p^{2}}-A\right) \frac{\partial p}{\partial x}-2 \frac{R_{g} T}{A} \frac{q_{m}}{p} \frac{\partial q_{m}}{\partial x}-\frac{f}{2 D} \frac{R_{g} T}{A} \frac{q_{m}\left|q_{m}\right|}{p}
$$

```julia
function TransitionPipe(; name,λ1=1.0,λ2=1.0,λ3=1.0, n=10, f=0.016, D=0.2, L=100, T=300, pins=0.56e6, pouts=0.56e6)
    RT = 287.11 * T
    A0 = pi / 4 * D^2
    c10 = RT / A0
    c20 = c10 * f / 2 / D
    dx=L/n

    @named inlet = FlowPort(T=T)
    @named outlet = FlowPort(T=T)

    @variables (qm(t))[1:n] (p(t))[1:n+1]

    qms = sqrt(abs(pins^2 - pouts^2) / (f * L * RT / D / A0 / A0))
    initialValue = Dict(qm[i] => qms for i = 1:n)
    merge!(initialValue, Dict(p[i] => sqrt(pins^2 * (1 - (i-1) / n) + pouts^2 * (i-1) / n) for i = 1:n+1))

    @parameters begin
        A = A0*λ2
        c1 = c10*λ1
        c2 = c20*λ3
        dx = L / n
        f = f
    end

    eqs_continous = [
        ∂(p[i]) ~ c1 * (qm[i-1] - qm[i]) / dx for i = 2:n
    ]

    eqs_momentum = [
        ∂(qm[i]) ~ (c1 * qm[i]^2 / (0.5 * (p[i+1] + p[i]))^2 - A) * (p[i+1] - p[i]) / dx + c1 * qm[i] / (0.5 * (p[i+1] + p[i])) * (qm[i-1] - qm[i+1]) / dx - c2 * qm[i] * abs(qm[i]) / (0.5 * (p[i+1] + p[i])) for i = 2:n-1
    ]

    bd = [
        p[1] ~ inlet.p
        p[n+1] ~ outlet.p
        qm[n] ~ -outlet.qm
        qm[1] ~ inlet.qm
        ∂(qm[1]) ~ (c1 * qm[1]^2 / (0.5 * (p[2] + p[1]))^2 - A) * (p[2] - p[1]) / dx + c1 * qm[1] / (0.5 * (p[2] + p[1])) * (3 * qm[1] - 4 * qm[2] + qm[3]) / dx - c2 * qm[1] * abs(qm[1]) / (0.5 * (p[2] + p[1]))
        ∂(qm[n]) ~ (c1 * qm[n]^2 / (0.5 * (p[n+1] + p[n]))^2 - A) * (p[n+1] - p[n]) / dx + c1 * qm[n] / (0.5 * (p[n+1] + p[n])) * (-3 * qm[n] + 4 * qm[n-1] - qm[n-2]) / dx - c2 * qm[n] * abs(qm[n]) / (0.5 * (p[n+1] + p[n]))
    ]
    compose(ODESystem([eqs_continous; eqs_momentum; bd], t; name=name, defaults=initialValue), inlet, outlet)
end
```

## [CompressedAirSystem](https://ai4energy.github.io/Ai4EComponentLib.jl/dev/API/CompressedAirSystem/)

[Example usage](https://ai4energy.github.io/Ai4EComponentLib.jl/dev/tutorials/CompressedAirSystem/)

### StraightPipe

Straight round pipe and height difference is not considered.
Friction coefficient is obtained from Moody diagram.

Arguments:  
-  $D$: [$m$] Pipe diameter, defaults: 1.0  
-  $L$: [$m$] Pipe length, defaults: 1.0  
-  $ϵ$: [$m$] Absolute roughness of pipeline, defaults: 0.05  

```julia
function StraightPipe(; name, D=1.0, L=1.0, ϵ=0.05e-3)
    @named this_i1o1Component = SISOComponent()
    @unpack Δp, qm, ρ_mean, qv_mean, μ_mean, inlet, outlet = this_i1o1Component
    sts = @variables begin
        Re(t) = 1.5e5
        u(t) = 10
        f(t) = 0.03
        R(t) = 10
    end
    ps = @parameters D = D L = L ϵ = ϵ
    eqs = [
        Re ~ pipeRe(ρ_mean, u, D, μ_mean)
        0 ~ pipeFriction_turbulent(f, Re, ϵ, D)
        u ~ pipeVelocity(Δp, ρ_mean, L, D, f)
        qv_mean ~ u * pi / 4 * D * D
        R ~ abs(Δp) / qm / qm
    ]
    extend(ODESystem(eqs, t, sts, ps; name=name), this_i1o1Component)
end
```

### SimplePipe

Arguments:  
-  $R0$: [$kg/m^7$] Resistance coefficient of pipeline  

```julia
function SimplifiedPipe(; name, R0)
    @named this_i1o1Component = SISOComponent()
    @unpack Δp, qm, qv_mean, inlet, outlet = this_i1o1Component
    sys = @variables R(t) = 3000
    eqs = [
        R ~ R0
        qm ~ IfElse.ifelse(Δp >= 0, sqrt(Δp / R), -sqrt(-Δp / R))
    ]
    extend(ODESystem(eqs, t, sys, []; name=name), this_i1o1Component)
end
```

### TransitionPipe

Arguments:
-  `f`: [`kg/m⁷`] Resistance coefficient of pipeline
-  `n`: Number of pipe discrete node
-  `D`: [`m`] Pipe diameter, defaults: 1.0
-  `L`: [`m`] Pipe length, defaults: 1.0
-  `T`: [`K`] Ambient temperature, defaults: 300
-  `p0`: [`Pa`] Initial pressure of each node
-  `qm0`: [`kg/(m²⋅s)`] Initial specific momentum of each node


```julia
function TransitionPipe(; name, n=10, f=0.011, D=1.0, L=1.0, T=300, p0=zeros(n), qm0=zeros(n))

    RT = 287.11 * T
    A0 = pi / 4 * D^2
    c10 = RT / A0
    c20 = c10 * f / 2 / D

    @named inlet = FlowPort()
    @named outlet = FlowPort()

    @parameters begin
        A = A0
        c1 = c10
        c2 = c20
        dx = L / n
        f = f
    end

    @variables (qm(t))[1:n] (p(t))[1:n+1]

    initialValue = Dict(qm[i] => qm0[i] for i = 1:n)
    merge!(initialValue, Dict(p[i] => p0[i] for i = 1:n))

    eqs_continous = [
        ∂(p[i]) ~ c1 * (qm[i-1] - qm[i]) / dx
        for i = 2:n
    ]

    eqs_momentum = [
        ∂(qm[i]) ~ (c1 * qm[i]^2 / (0.5 * (p[i+1] + p[i]))^2 - A) * (p[i+1] - p[i]) / dx + c1 * qm[i] / (0.5 * (p[i+1] + p[i])) * (qm[i-1] - qm[i+1]) / dx - c2 * qm[i] * abs(qm[i]) / (0.5 * (p[i+1] + p[i]))
        for i = 2:n-1
    ]

    bd = [
        p[1] ~ inlet.p
        p[n+1] ~ outlet.p
        qm[n] ~ -outlet.qm
        qm[1] ~ inlet.qm
        ∂(qm[1]) ~ (c1 * qm[1]^2 / (0.5 * (p[2] + p[1]))^2 - A) * (p[2] - p[1]) / dx + c1 * qm[1] / (0.5 * (p[2] + p[1])) * (3 * qm[1] - 4 * qm[2] + qm[3]) / dx - c2 * qm[1] * abs(qm[1]) / (0.5 * (p[2] + p[1]))
        ∂(qm[n]) ~ (c1 * qm[n]^2 / (0.5 * (p[n+1] + p[n]))^2 - A) * (p[n+1] - p[n]) / dx + c1 * qm[n] / (0.5 * (p[n+1] + p[n])) * (-3 * qm[n] + 4 * qm[n-1] - qm[n-2]) / dx - c2 * qm[n] * abs(qm[n]) / (0.5 * (p[n+1] + p[n]))
    ]
    compose(ODESystem([eqs_continous; eqs_momentum; bd], t; name=name, defaults=initialValue), inlet, outlet)
end
```

## [HVAC](https://ai4energy.github.io/Ai4EComponentLib.jl/dev/API/HVAC/)

### SimplePipe

Parameters:  
- $R$: [$Pa·s/m³$] Friction factor

```julia
function SimplePipe(; name, R=100, T=300)
    @named inlet = FlowPort()
    @named outlet = FlowPort()
    ps = @parameters begin
        R = R
    end
    eqs = [
        inlet.p - outlet.p ~ R * inlet.qm * abs(inlet.qm),
        inlet.qm + outlet.qm ~ 0,
        inlet.T ~ outlet.T
    ]
    compose(ODESystem(eqs, t, [], ps; name=name), inlet, outlet)
end
```

## [IncompressiblePipe](https://ai4energy.github.io/Ai4EComponentLib.jl/dev/API/IncompressiblePipe/)

Energy conservation equation in the form of Bernoulli Equation between two ports:

$$
\frac{p_{in}}{\rho g} +\frac{8q_{in}^{2}}{\pi^2D^4g} + z_{in}=
\frac{p_{out}}{\rho g} +\frac{8q_{out}^{2}}{\pi^2D^4g} + z_{out}+h_f+h_m
$$

### SimplePipe

Arguments:  
- $zin$: [$m$] The height of inlet port  
- $zout$: [$m$] The height of outlet port  
- $ρ$: [$m³/kg$] The density of fluid passing the port  

::: {.callout-warning}
The density unit above is likely wrong. This is what the [source code](https://github.com/ai4energy/Ai4EComponentLib.jl/blob/cb09a2f0abff461121c6e6b4f6568828a8baecc1/src/lib/IncompressiblePipe/components/pipe.jl#L26) says but these annotations have been inconsistent: some have a line describing another component. Some have typos. This unit has likely been inverted by accident.
:::

```julia
function SimplePipe(; name, L=10.0, D=25E-3, f=0.01, ρ=1.0E3, zin=0.0, zout=0.0, K_inside=0.0)
    @named in = PipeNode(z=zin)
    @named out = PipeNode(z=zout)
    ps = @parameters D = D L = L f = f K_inside = K_inside
    eqs = [
        _NodeEnergy(in, D, ρ) ~ _NodeEnergy(out, D, ρ) + _h_f(in, f, L, D) + _h_m(in, K_inside, D)
        0 ~ in.q + out.q
    ]
    compose(ODESystem(eqs, t, [], ps, name=name), in, out)
end
```

### ElbowPipe

Parameters:  
- $D$: [$m$] Diameter of pipe  
- $K$: Local resistance loss coefficient  

Arguments:  
- $zin$: [$m$] The height of inlet port  
- $zout$: [$m$] The height of outlet port  
- $ρ$: [$m^3/kg$] The density of fluid passing the port  
  
::: {.callout-warning}
Same as above.
:::

```julia
function ElbowPipe(; name, D=25E-3, K=1.0, ρ=1.0E3, zin=0.0, zout=0.0)
    @named in = PipeNode(z=zin)
    @named out = PipeNode(z=zout)
    ps = @parameters D = D K = K
    eqs = [
        _NodeEnergy(in, D, ρ) ~ _NodeEnergy(out, D, ρ) + _h_m(in, K, D)
        0 ~ in.q + out.q
    ]
    compose(ODESystem(eqs, t, [], ps, name=name), in, out)
end
```

### PipeNode

A pipe port(inlet or outlet) in an pipe network.

States:  
- $p(t)$: [$Pa$] The pressure at this port  
- $q(t)$: [$m³/s$] The volume flow passing through this port  

Parameters:  
- $z$: [$m$] The hight of port, expressing potential energy

```julia
@connector function PipeNode(; name, z=0)
    sts = @variables begin
        p(t) = 1.0
        (q(t)=1.0, [connect = Flow])
    end
    ps = @parameters z = z
    ODESystem(Equation[], t, sts, ps; name=name)
end
```

[NodeEnergy and loss calculations are shown here.](https://github.com/ai4energy/Ai4EComponentLib.jl/blob/cb09a2f0abff461121c6e6b4f6568828a8baecc1/src/lib/IncompressiblePipe/utils.jl)